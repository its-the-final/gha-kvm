defaults:
  run:
    shell: bash
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      image:
        default: "https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"
        description: "Image to load "
      size:
        default: "24G"
        description: "resize img" 
      preloader:
        default: "none"
        description: "pre-hook"
      loader:
        default: "none"
        description: "inside-hook"
      keymap:
        default: "en-us"
        description: "keymap"
      cdrom:
        default: "none"
        description: "cd image"
      sshkey:
        default: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQC6cZ/ZGVD547VMy4Cz/sMVAezZsv33woT8v9zCh0WuSIcMZOFIeBhI7oB6L7hwSlGmb2BNFmgJJ5ML0jy6y55rI1X0EaQV9uLTdYcfpcFUu0sbq5/9TAEWqt5EL8R7nxs7Yl8FEfUhG4GAMiDUwJK9oOIHvtzjqdCNYZKOB5JyVc3/tBqtUXbMrGP+ZLuqscxLrdbgQRg6FTOXt8jW48ofYa7nM7tMoFBXIN7wSCPpifme7HnoblHIeoPlGwyLPEiu36pnj6KAKQCZgYenx8Noj99+nnFJorxbtgIL7WMWjt+HlVaiVEZ6A6MbaZbwrhpCiow57bd3zdq3vluZwPZNNCL8AOKXtm7D35aC+wKibur7FyundFNlKpHgTtXRYNEKRj/ulW1z2HKwoU6Ban6X+rSzVmGkBiQyB/G76L8b/eXRh3Hptvbp4nQu15kGhsQXZA7g7Z25yPlmeO7pWMRJRNbohhOM/29PX1c6dH9+WoNJtkHh6Hk1fgTD0JDVxNFarIjmxv0nIQUcr0tdsL2/3o0t7sZwjtZvoFSGqKsZ5PMAqUHjJiDnGwK+GDBOoWWtrtkJXNfSxwl0Zsazj6tN4CG29sUjzss9LWcNTa8zdUhb3RY6OhpWcQaBJi/MmQVKLacwy+KxKfhMEXmNkaVWyX3eCaK1ih9q7wWM6iDWX1pJkmKlroXmRzVaSgfNb1JIRkBtiecOHN+26Bv59TbJcKkYXsbBP6P4m5VqjiJD2xw/VN6sW8Kohu9igBtxNR4ayYqKyIRPE5UbE/kl4x+84C//IfKdnRoLmCwkUauOC8z/5ThMmlASAtIOgAcdQSJRXWyWtQoZnDc5Om3SCejqflkBceQpr8JeqRN9jHDGAXCQrQjm4AUnwHnJU9O3O8CFjhUuSqVrqY3myJPN1g0T8INvF5KYzUk9Zhgp18vYeY8/TqpJbcGT3aXeIFa87LXEPk7SruPjbtUjvmqlXp8ADLXIwE6vVpLveutto1RCtp72XKc1poL7nS5BmLW5efeqJqApNx/o32sTh9ZtRpMj5+GZDr8ZPGEG5hX6ZtMqee3NtANpTgm4ocAO0kYl+kwnWJtP/Z/QceCd5NLKzzLVohNE+KlDsTTz7u0TsazOsaPPYZ2P+tO5nuFkTwA/E4aXHhc4PvyOOnREDdN24ij3owEE/tv+37i+ZWdSdTDnQMV7XzgsbmtsQbYNp2EAaiQvbDHCYmpABXRzkdwsYhIsHy535s9xed890gtcwrecqHOaUt09THpReh8i6pphVTqEcVCb+VdkoLzekbMFRhYIOlykpVpXF8rcx5owrET91UjGsoQ2ZxTwvJRTgnmOwjzGsZNxAcW2EIhPtysfhMLR mykey@host"
        description: "sshkey" 

jobs:
  setup:
    runs-on: ubuntu-latest
    container: ghcr.io/its-the-final/gha-kvm:latest
    steps:
      - uses: actions/checkout@v4
#      - uses: ilammy/setup-nasm@v1
      - name: Set default value
        id: valuesprep
        run: |
          KEY_INPUT=${{ github.event.inputs.sshkey }}
          echo sshkey=${IMG_INPUT:-"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQC6cZ/ZGVD547VMy4Cz/sMVAezZsv33woT8v9zCh0WuSIcMZOFIeBhI7oB6L7hwSlGmb2BNFmgJJ5ML0jy6y55rI1X0EaQV9uLTdYcfpcFUu0sbq5/9TAEWqt5EL8R7nxs7Yl8FEfUhG4GAMiDUwJK9oOIHvtzjqdCNYZKOB5JyVc3/tBqtUXbMrGP+ZLuqscxLrdbgQRg6FTOXt8jW48ofYa7nM7tMoFBXIN7wSCPpifme7HnoblHIeoPlGwyLPEiu36pnj6KAKQCZgYenx8Noj99+nnFJorxbtgIL7WMWjt+HlVaiVEZ6A6MbaZbwrhpCiow57bd3zdq3vluZwPZNNCL8AOKXtm7D35aC+wKibur7FyundFNlKpHgTtXRYNEKRj/ulW1z2HKwoU6Ban6X+rSzVmGkBiQyB/G76L8b/eXRh3Hptvbp4nQu15kGhsQXZA7g7Z25yPlmeO7pWMRJRNbohhOM/29PX1c6dH9+WoNJtkHh6Hk1fgTD0JDVxNFarIjmxv0nIQUcr0tdsL2/3o0t7sZwjtZvoFSGqKsZ5PMAqUHjJiDnGwK+GDBOoWWtrtkJXNfSxwl0Zsazj6tN4CG29sUjzss9LWcNTa8zdUhb3RY6OhpWcQaBJi/MmQVKLacwy+KxKfhMEXmNkaVWyX3eCaK1ih9q7wWM6iDWX1pJkmKlroXmRzVaSgfNb1JIRkBtiecOHN+26Bv59TbJcKkYXsbBP6P4m5VqjiJD2xw/VN6sW8Kohu9igBtxNR4ayYqKyIRPE5UbE/kl4x+84C//IfKdnRoLmCwkUauOC8z/5ThMmlASAtIOgAcdQSJRXWyWtQoZnDc5Om3SCejqflkBceQpr8JeqRN9jHDGAXCQrQjm4AUnwHnJU9O3O8CFjhUuSqVrqY3myJPN1g0T8INvF5KYzUk9Zhgp18vYeY8/TqpJbcGT3aXeIFa87LXEPk7SruPjbtUjvmqlXp8ADLXIwE6vVpLveutto1RCtp72XKc1poL7nS5BmLW5efeqJqApNx/o32sTh9ZtRpMj5+GZDr8ZPGEG5hX6ZtMqee3NtANpTgm4ocAO0kYl+kwnWJtP/Z/QceCd5NLKzzLVohNE+KlDsTTz7u0TsazOsaPPYZ2P+tO5nuFkTwA/E4aXHhc4PvyOOnREDdN24ij3owEE/tv+37i+ZWdSdTDnQMV7XzgsbmtsQbYNp2EAaiQvbDHCYmpABXRzkdwsYhIsHy535s9xed890gtcwrecqHOaUt09THpReh8i6pphVTqEcVCb+VdkoLzekbMFRhYIOlykpVpXF8rcx5owrET91UjGsoQ2ZxTwvJRTgnmOwjzGsZNxAcW2EIhPtysfhMLR mykey@host"} >> "$GITHUB_OUTPUT"
          IMG_INPUT=${{ github.event.inputs.image }}
          MYIMG=${IMG_INPUT:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"}
          echo "image=${IMG_INPUT:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"}" >> "$GITHUB_OUTPUT"
          echo imgsum=$(echo ${IMG_INPUT:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"} |md5sum|cut -d" " -f1) >> "$GITHUB_OUTPUT"
          PRELOADR_INPUT=${{ github.event.inputs.loader }}
          echo "preloader=${PRELOADR_INPUT:-"none"}" >> "$GITHUB_OUTPUT"
          LOADR_INPUT=${{ github.event.inputs.loader }}
          echo "loader=${LOADR_INPUT:-"none"}" >> "$GITHUB_OUTPUT"
          SIZE_INPUT=${{ github.event.inputs.size }}
          echo "size=${SIZE_INPUT:-"24G"}" >> "$GITHUB_OUTPUT"
          DEFKEY=${{ github.event.inputs.keymap }}
          echo "keymap=${DEFKEY:-"en-us"}" >> "$GITHUB_OUTPUT"
          DEF_CD=${{ github.event.inputs.cdrom }}
          MYCD=${DEF_CD:-"none"}
          echo "${MYCD}"  | grep ^none$ || wget -O cdrom/cd.iso -c "${MYCD}"
          echo "${MYCD}"  | grep ^none$ || echo cdrom="file=cdrom/cd.iso,if=ide,index=1,media=cdrom" >> "$GITHUB_OUTPUT"
          echo "${MYCD}"  | grep ^none$ && echo cdrom="if=ide,index=1,media=cdrom" >> "$GITHUB_OUTPUT"
          git config --global --add safe.directory $(pwd)
          echo sha_short=$(git log --pretty=format:'%H' -n 1) >> "$GITHUB_OUTPUT"
          echo sha_short=$(git log --pretty=format:'%H' -n 1)
      - name: Cache Primes
        id: cache-primes
        uses: actions/cache@v4
        with:
          path: alpine-x86_64.qcow2
          key: ${{ runner.os }}-primes-${{ steps.valuesprep.outputs.imgsum }}
  
      - name: Prepare Boot-Man demo
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: |
          #git clone https://github.com/guyhill/Boot-Man
          #cd Boot-Man
          #make
          #sudo rm -rf /var/cache/apt/archives; mkdir aptcache_archives;sudo ln -s $(pwd)/aptcache_archives /var/cache/apt/archives 
          sudo chmod -R a+r /var/cache/apt/archives
          which qemu-img || sudo apt-get update && ( time (sudo apt-get -y install qemu-utils netcat-openbsd cloud-image-utils 2>&1 |wc -l ))
          bash -c "mkdir images;cd images ;time wget -q -c -O machine.qcow2 ${{ steps.valuesprep.outputs.image }}"
          #wget -q -c https://cloud.debian.org/images/cloud/bullseye-backports/20250703-2162/debian-11-backports-nocloud-amd64-20250703-2162.tar.xz
          #tar --xz -xf debian-11-backports-nocloud-amd64-20250703-2162.tar.xz
          #ln -s debian-11-backports-nocloud-amd64-20250703-2162.raw alpine-x86_64.img
          bash -c "time  qemu-img resize images/machine.qcow2 +${{ steps.valuesprep.outputs.size }}" || true
          test -e qemu-kvm-action || git clone https://github.com/etchdroid/qemu-kvm-action.git
      - name: Save STEP
        id: cache-step-save
        uses: actions/cache/save@v4
        with:
          path: ./
          key: ${{ runner.os }}-step-${{ github.run_id }}
      - name: Save Primes
        id: cache-primes-save
        uses: actions/cache/save@v4
        with:
#          path: alpine-x86_64.qcow2
          path: |
            images
            cdrom
            /var/cache/apt/archives
          key: ${{ runner.os }}-primes-${{ steps.valuesprep.outputs.imgsum }}
#          key: ${{ steps.cache-primes-restore.outputs.cache-primary-key }}
      - name: Cache settle time
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: |
             sleep 10
      - name: Cache_global settle time
        run: |
             sleep 10
################
  run:
    runs-on: ubuntu-latest
    #container: ghcr.io/its-the-final/gha-kvm:latest
    needs: setup
    steps:
      - name: Set default value
        id: valuesprep
        run: |
          KEY_INPUT=${{ github.event.inputs.sshkey }}
          echo sshkey=${IMG_INPUT:-"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQC6cZ/ZGVD547VMy4Cz/sMVAezZsv33woT8v9zCh0WuSIcMZOFIeBhI7oB6L7hwSlGmb2BNFmgJJ5ML0jy6y55rI1X0EaQV9uLTdYcfpcFUu0sbq5/9TAEWqt5EL8R7nxs7Yl8FEfUhG4GAMiDUwJK9oOIHvtzjqdCNYZKOB5JyVc3/tBqtUXbMrGP+ZLuqscxLrdbgQRg6FTOXt8jW48ofYa7nM7tMoFBXIN7wSCPpifme7HnoblHIeoPlGwyLPEiu36pnj6KAKQCZgYenx8Noj99+nnFJorxbtgIL7WMWjt+HlVaiVEZ6A6MbaZbwrhpCiow57bd3zdq3vluZwPZNNCL8AOKXtm7D35aC+wKibur7FyundFNlKpHgTtXRYNEKRj/ulW1z2HKwoU6Ban6X+rSzVmGkBiQyB/G76L8b/eXRh3Hptvbp4nQu15kGhsQXZA7g7Z25yPlmeO7pWMRJRNbohhOM/29PX1c6dH9+WoNJtkHh6Hk1fgTD0JDVxNFarIjmxv0nIQUcr0tdsL2/3o0t7sZwjtZvoFSGqKsZ5PMAqUHjJiDnGwK+GDBOoWWtrtkJXNfSxwl0Zsazj6tN4CG29sUjzss9LWcNTa8zdUhb3RY6OhpWcQaBJi/MmQVKLacwy+KxKfhMEXmNkaVWyX3eCaK1ih9q7wWM6iDWX1pJkmKlroXmRzVaSgfNb1JIRkBtiecOHN+26Bv59TbJcKkYXsbBP6P4m5VqjiJD2xw/VN6sW8Kohu9igBtxNR4ayYqKyIRPE5UbE/kl4x+84C//IfKdnRoLmCwkUauOC8z/5ThMmlASAtIOgAcdQSJRXWyWtQoZnDc5Om3SCejqflkBceQpr8JeqRN9jHDGAXCQrQjm4AUnwHnJU9O3O8CFjhUuSqVrqY3myJPN1g0T8INvF5KYzUk9Zhgp18vYeY8/TqpJbcGT3aXeIFa87LXEPk7SruPjbtUjvmqlXp8ADLXIwE6vVpLveutto1RCtp72XKc1poL7nS5BmLW5efeqJqApNx/o32sTh9ZtRpMj5+GZDr8ZPGEG5hX6ZtMqee3NtANpTgm4ocAO0kYl+kwnWJtP/Z/QceCd5NLKzzLVohNE+KlDsTTz7u0TsazOsaPPYZ2P+tO5nuFkTwA/E4aXHhc4PvyOOnREDdN24ij3owEE/tv+37i+ZWdSdTDnQMV7XzgsbmtsQbYNp2EAaiQvbDHCYmpABXRzkdwsYhIsHy535s9xed890gtcwrecqHOaUt09THpReh8i6pphVTqEcVCb+VdkoLzekbMFRhYIOlykpVpXF8rcx5owrET91UjGsoQ2ZxTwvJRTgnmOwjzGsZNxAcW2EIhPtysfhMLR mykey@host"} >> "$GITHUB_OUTPUT"
          IMG_INPUT=${{ github.event.inputs.image }}
          MYIMG=${IMG_INPUT:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"}
          echo "image=${IMG_INPUT:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"}" >> "$GITHUB_OUTPUT"
          echo imgsum=$(echo ${IMG_INPUT:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"} |md5sum|cut -d" " -f1) >> "$GITHUB_OUTPUT"
          PRELOADR_INPUT=${{ github.event.inputs.loader }}
          echo "preloader=${PRELOADR_INPUT:-"none"}" >> "$GITHUB_OUTPUT"
          LOADR_INPUT=${{ github.event.inputs.loader }}
          echo "loader=${LOADR_INPUT:-"none"}" >> "$GITHUB_OUTPUT"
          SIZE_INPUT=${{ github.event.inputs.size }}
          echo "size=${SIZE_INPUT:-"24G"}" >> "$GITHUB_OUTPUT"
          DEFKEY=${{ github.event.inputs.keymap }}
          echo "keymap=${DEFKEY:-"en-us"}" >> "$GITHUB_OUTPUT"
          DEF_CD=${{ github.event.inputs.cdrom }}
          MYCD=${DEF_CD:-"none"}
          echo "${MYCD}"  | grep ^none$ || wget -O cdrom/cd.iso -c "${MYCD}"
          echo "${MYCD}"  | grep ^none$ || echo cdrom="file=cdrom/cd.iso,if=ide,index=1,media=cdrom" >> "$GITHUB_OUTPUT"
          echo "${MYCD}"  | grep ^none$ && echo cdrom="if=ide,index=1,media=cdrom" >> "$GITHUB_OUTPUT"
          git config --global --add safe.directory $(pwd)
          echo sha_short=$(git log --pretty=format:'%H' -n 1) >> "$GITHUB_OUTPUT"
          echo sha_short=$(git log --pretty=format:'%H' -n 1)

      - name: Restore cache that can fail
        # You need to specify an id to be able to tell what the status of this action was
        id: restorecache1
        # This needs to be true to proceed to the next step of failure
        continue-on-error: true
        uses: actions/cache@v4
        with:
          path: ./
          key: ${{ runner.os }}-step-${{ github.run_id }}
      - name: Check-and-sleep
        id: cachewait1
        run: |
             ls -1 prepare-cloudinit.sh || sleep 20 
             ls -1 prepare-cloudinit.sh
        continue-on-error: true

      - name: Restore cache that can fail
        # You need to specify an id to be able to tell what the status of this action was
        id: restorecache2
        # Only run this step if previus action fails. It knows that step one failed because we specified an `id` for the first step
        if: steps.cachewait1.outcome == 'failure'

        # This needs to be true to proceed to the next step of failure
        continue-on-error: true
        uses: actions/cache@v4
        with:
          path: ./
          key: ${{ runner.os }}-step-${{ github.run_id }}

      - name: Check-and-sleep
        id: cachewait2
        run: |
             ls -1 prepare-cloudinit.sh || sleep 20 
             ls -1 prepare-cloudinit.sh
        continue-on-error: true

      # Duplicate of the step that might fail ~ manual retry
      - name: Restore cache that cannot fail
        id: restorecache3
        # Only run this step if step 1 fails. It knows that step one failed because we specified an `id` for the first step
        if: steps.cachewait2.outcome == 'failure'
        # This needs to be true to proceed to the next step of failure
        continue-on-error: false
        uses: actions/cache@v4
        with:
          path: ./
          key: ${{ runner.os }}-step-${{ github.run_id }}
      - name: Check-and-fail
        id: cachewait3
        run: |
             ls -1 prepare-cloudinit.sh
        continue-on-error: false
      - name: PREPARE qemu
        id: prepareqemu
        run: bash prepare-cloudinit.sh; which cloud-localds || (sudo apt-get update;sudo apt-get install --yes iproute2 netcat-openbsd cloud-image-utils );test -e seed.img && rm seed.img ; echo gen seed;cloud-localds seed.img cinit/user-data cinit/meta-data ; sudo apt-get update; sudo apt-get -y install curl ovmf ffmpeg i3-wm qemu-system-gui;which python3 || sudo apt-get -y --no-install-recommends python3 ;cd cinit;pwd;python3 -m http.server --directory . &  sleep 2;curl 127.0.0.1:8000;echo;echo;ipconfig="myip="$(ip a|grep eth0|grep inet|grep -v inet6|cut -dt -f2|cut -d/ -f1|head -n1|cut -d" " -f2);echo $ipconfig;echo $ipconfig >> $GITHUB_OUTPUT
      - name: Set root disk and run preloader scripts
        id: setroot
        run: |
          IMG_INPUT=${{ github.event.inputs.image }}
          MYIMG=${IMG_INPUT:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-3.22.1-x86_64-bios-cloudinit-r0.qcow2"}
          echo "${MYIMG}" | grep -q ^s3b: || echo root="images/machine.qcow2" >> "$GITHUB_OUTPUT"
          echo "${MYIMG}" | grep -q ^s3b: && echo root="nbd://${{ steps.prepareqemu.outputs.myip }}:1111/qemu"  >> "$GITHUB_OUTPUT"
          echo "${MYIMG}" | grep -q ^s3b: && ( sudo apt install nbdkit-plugin-dev make libfuse3-dev nbdkit libssl-dev nbd-client git ; test -e /usr/src/s3backer || git clone https://github.com/archiecobbs/s3backer.git /usr/src/s3backer ;cd /usr/src/s3backer ;bash rebuild.sh ; sudo make install ||true )
          echo "${MYIMG}" | grep -q ^s3b: && { nbdkit s3backer --dump-plugin|grep name=s3backer || exit 1  ; } ;
          echo "${MYIMG}" | grep -q ^s3b: && { AWSURL="$MYIMG"; mydir=$(echo "$AWSURL"|cut -d/ -f4-);myhost=$(echo "$AWSURL"|cut -d/ -f3|cut -d@ -f2); myauth=$(echo "$AWSURL"|cut -d/ -f3|cut -d@ -f1) ;sed 's/MYSIZE/${{ steps.valuesprep.outputs.size }}/g;s~s3.endpoint.lan~'"${myhost}"'~g;s~BUCKETNAME/FOLDERNAME~'"$mydir"'~g' -i configs/s3b.conf ; echo "$myauth" > /tmp/awskey ; } ;
          echo "${MYIMG}" | grep ^s3b: |grep -q "KEY=" && ((echo -- "--encrypt";  echo -- "--passwordFile=/tmp/.s3b_key") > /tmp/s3b.conf ; echo "${MYIMG}" | sed 's/.\+KEY=//g' > /tmp/.s3b.key )
          echo "${MYIMG}" | grep -q ^s3b: && { cat configs/s3b.conf >> /tmp/s3b.conf ; mkdir /tmp/s3bcache ;nbdkit --filter=exitlast --port=11111 --exportname=qemu s3backer s3b_configFile=/tmp/s3b.conf ; rm /tmp/.s3b.key || true  ; } ;
          bash -c '[[ "none" = "${{ steps.valuesprep.outputs.preloader }}" ]]   || ( echo using    preloader ; PRLD="${{ steps.valuesprep.outputs.preloader }}"; echo "$PRLD" |grep -q ^https:// && (wget -c -O- "$PRLD"|bash            );  echo "$PRLD" |grep -q ^s3:// && (bash s3-script-get.sh /tmp/preload "$PRLD" ; bash /tmp/preload; rm /tmp/preload|| true   ); )'
          bash -c '[[ "none" = "${{ steps.valuesprep.outputs.loader }}" ]]   ||    ( echo using inner loader ; LOAD="${{ steps.valuesprep.outputs.loader }}";    echo "$LOAD" |grep -q ^https:// && (wget -c -O- "$LOAD" > customscrimpt );  echo "$LOAD" |grep -q ^s3:// && (bash s3-script-get.sh customscript "$LOAD" ; rm /tmp/preload|| true                      ); )'

#      - name: install action
#        id: action-install
#        run: git clone https://github.com/etchdroid/qemu-kvm-action.git
##      - name: Setup QEMU
##        uses: etchdroid/qemu-kvm-action/setup@v1
##        with:
##          video-record: true
##        env:
##          DEBIAN_FRONTEND: noninteractive
##          TERM: linux
      - name: create fifos
        run:  mkfifo /tmp/guest.in /tmp/guest.out
      - name: Run QEMU
        id: run-qemu
        uses: etchdroid/qemu-kvm-action@v1
        with:
#          https://github.com/etchdroid/qemu-kvm-action/blob/main/action.yml
          smp: 8
          memory: 8192
          video-record: false
          #flags: 'Boot-Man/boot-man.bin'
          flags: |
            -serial
            pipe:/tmp/guest
            -enable-kvm
            -drive
            id=disk,file={{ steps.valuesprep.outputs.root }},if=none
            -device
            ahci,id=ahci
            -device
            ide-hd,drive=disk,bus=ahci.0
            -drive
            id=cidata,file=seed.img,if=none
            -device
            ide-hd,drive=cidata,bus=ahci.1
            -k
            {{ steps.valuesprep.outputs.keymap }}
            -net
            nic,model=rtl8139
            -net
            user,hostfwd=tcp::2222-:22,hostfwd=tcp::15901-:5901
            -vnc
            :1
            -device
            VGA,vgamem_mb=${{ steps.valuesprep.outputs.vgamem }}
            -cdrom
            ${{ steps.valuesprep.outputs.cdrom }}
            -boot
            ${{ steps.valuesprep.outputs.booto }}
#         run: echo provisioning from ${{ steps.prepareqemu.outputs.myip }} ; echo ${{ steps.prepareqemu.outputs.myip }} > /tmp/myip ;sleep 10 ;tail -f -r  /tmp/guest.out &  test -e TMP_SCRIPT && bash TMP_SCRIPT;  echo  > /tmp/guest.in  ;sleep 42 ; ( echo timmy;sleep 1;echo password111 ;sleep 5;echo 'doas ash -c "echo asd;test -e /dev/ttyS0 && echo in_term_ttyS0 >>/dev/ttyS0 ; test -e /dev/ttyAMA0 && echo in_term_ttyAMA0 >> /dev/ttyAMA0; ln -s /tmp/tsocks.conf /etc/; apk add tor tsocks screen curl socat bash"';sleep 1 ; echo password ;sleep 1;echo bash;sleep 1;cat serialscript;sleep 3) > /tmp/guest.in & sleep 20;bash -c "ps -ALFc|grep qemu;ps w|grep qemu;sleep 60; while (ps -ALFc|grep -v grep |grep qemu|grep  kvm |grep 8192);do sleep 60 ;echo -n .;done"
          run: echo provisioning from ${{ steps.prepareqemu.outputs.myip }} ; echo ${{ steps.prepareqemu.outputs.myip }} > /tmp/myip ;sleep 10 ;tail -f -r  /tmp/guest.out &  test -e TMP_SCRIPT && bash TMP_SCRIPT; echo  > /tmp/guest.in  ;sleep 42 ; ( echo ) > /tmp/guest.in & sleep 20;bash -c "ps -ALFc|grep qemu;ps w|grep qemu;sleep 60;counter="0"; while ((echo |nc 127.0.0.1 2222)|grep -i ssh -q|| exit 1);do  counter=$(($counter + 1 ));[[ $(($counter % 10 )) -eq 0 ]] && echo ; sleep 60 ;echo -n .;done"


# echo 'screen -dmS sshj ash -c "while (true);do ssh qemukvmtest@ssh-j.com -N -R qemukvm:22:localhost:22 ;done" & '          
#            -smbios
#            type=1,serial=ds='nocloud;s=http://10.0.2.2:8000/'

            #  -monitor
          #  pipe:/tmp/guest
#            type=1,serial=ds='nocloud;s=http://${{ steps.prepareqemu.outputs.myip }}:8000/'
          #run: cat /tmp/guest.out & sleep 60 ;(echo sendkey r ;echo sendkey o ;echo sendkey o ;echo sendkey t;echo sendkey ret ;echo sendkey r ;echo sendkey o ;echo sendkey o ;echo sendkey t;echo sendkey ret ; echo sendkey t;echo sendkey o ;echo sendkey p;echo sendkey ret;sleep 2 ) > /tmp/guest.in; sleep 20

      - name: Upload video
        uses: actions/upload-artifact@v4
        with:
          name: recording
          path: ${{ steps.run-qemu.outputs.video-output }}
